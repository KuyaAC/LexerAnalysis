From File: 3rdsample.ecpp
Here is the Output of EC++ Lexical Analyzer:

Lexemes                                  Tokens
int                                      Keyword
main                                     Identifier
(                                        Open_Parenthesis
)                                        Close_Parenthesis
{                                        Open_CurlyB
const                                    Keyword
month                                    Identifier
=                                        SimpleAssignment_ArOperator
12                                       Constant_Number
a                                        Identifier
++                                       Increment_ArOperator
;                                        Semi-colon
b                                        Identifier
++                                       Increment_ArOperator
;                                        Semi-colon
display                                  Keyword
<<                                       Insertion Operator
Sum                                      String_literal
<<                                       Insertion Operator
(                                        Open_Parenthesis
a                                        Identifier
+                                        Addition_ArOperator
b                                        Identifier
)                                        Close_Parenthesis
;                                        Semi-colon
display                                  Keyword
<<                                       Insertion Operator
Difference4                              Keyword
<<                                       Insertion Operator
(                                        Open_Parenthesis
a                                        Identifier
-                                        Subtraction_ArOperator
b                                        Identifier
)                                        Close_Parenthesis
;                                        Semi-colon
display                                  Keyword
<<                                       Insertion Operator
Product                                  String_literal
<<                                       Insertion Operator
(                                        Open_Parenthesis
a                                        Identifier
*                                        Multiplication_ArOperator
b                                        Identifier
)                                        Close_Parenthesis
;                                        Semi-colon
display                                  Keyword
<<                                       Insertion Operator
Quotient                                 String_literal
<<                                       Insertion Operator
(                                        Open_Parenthesis
a                                        Identifier
/                                        Division_ArOperator
b                                        Identifier
)                                        Close_Parenthesis
;                                        Semi-colon
display                                  Keyword
<<                                       Insertion Operator
Remainder                                String_literal
<<                                       Insertion Operator
(                                        Open_Parenthesis
a                                        Identifier
%                                        Modulus_ArOperator
b                                        Identifier
)                                        Close_Parenthesis
;                                        Semi-colon
}                                        Close_CurlyB
eger                                     Noisewords
acter                                    Noisewords
ant                                      Noisewords
ean                                      Noisewords

Comment in Line 11: //Demo of noise words
